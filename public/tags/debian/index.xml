<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Debian on Nandaja.</title>
    <link>http://localhost:60425/tags/debian/</link>
    <description>Recent content in Debian on Nandaja.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Fri, 30 Nov 2012 18:26:05 +0530</lastBuildDate>
    
	<atom:link href="http://localhost:60425/tags/debian/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debian Packaging</title>
      <link>http://localhost:60425/post/2012-11-30-debian-packaging/</link>
      <pubDate>Fri, 30 Nov 2012 18:26:05 +0530</pubDate>
      
      <guid>http://localhost:60425/post/2012-11-30-debian-packaging/</guid>
      <description>&lt;p&gt;Once you&amp;rsquo;ve picked a Gem and filed the ITP, it is time for you to start packaging. For this first run the command:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gem2deb &lt;Gem name&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;gem2deb is actually the Ruby Debian packaging suite. It is a set of tools to create Debian packages from Ruby software distributed with RubyGems. It will automatically run the tests for Ruby1.8 and Ruby1.9 as well. For running these tests gem2deb look for a Rakefile or a .rb file or a .Yaml file inside the debian directory. Running these tests successfully has always been a headache for me. Still not at all good at it.&lt;/p&gt;
&lt;p&gt;Okay, So once you have completed running gem2deb successfully, it is time for you to edit the changelog, copyright and control files. Inside the changelog file you will have to include the bug number of the filed ITP and the author&amp;rsquo;s name. In the copyright file, we have to include the copyright information like licence, author etc. of the actual gem as well as the debian package. Now the control file is the one I had real trouble dealing with. We have to include two neat descriptions about the Ruby library and its purpose. People decide whether to download that package or not reading this description, so make it catchy (I never could). Next check whether these files are clean using the command:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lintian -iIEcv &amp;ndash;pedantic &amp;ndash;color auto ruby-foo*.changes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next step is to build the package using build package and pbuilder, that is, run the following commands:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dpkg-buildpackage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sudo pbuiler ruby-foo*.dsc&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once you have made sure that there are no errors and the tests are running perfectly, Yeah, that&amp;rsquo;s pretty much it. Next step is to upload it to the mentors. For this you need an account in &lt;a href=&#34;https://alioth.debian.org/projects/pkg-ruby-extras/&#34;&gt;https://alioth.debian.org/projects/pkg-ruby-extras/&lt;/a&gt;. Mine isn&amp;rsquo;t activated yet. So I just push it to my gitorious repo. Before pushing we will have to import the file using git-import-dsc. This one also has been a tough one for me, as my knowledge in git is too vague. For more info on this step or a  any previous ones, checking out the Diaspora packaging page in debian wiki would be your best bet. Okay, So once you&amp;rsquo;ve pushed your imported file to the repo you will find three branches there, if you did it right- master, pristine-tar and upstream. And now it&amp;rsquo;s time to wait for someone to review it for you.&lt;/p&gt;
&lt;p&gt;I know this post would be of no use, because I&amp;rsquo;ve simply scribbled everything down in a rush. May be I&amp;rsquo;ll blog about the issues I faced at each step. But sometime later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diaspora Packaging For Debian</title>
      <link>http://localhost:60425/post/2012-11-29-diaspora-packaging-for-debian/</link>
      <pubDate>Thu, 29 Nov 2012 22:58:42 +0530</pubDate>
      
      <guid>http://localhost:60425/post/2012-11-29-diaspora-packaging-for-debian/</guid>
      <description>&lt;p&gt;Here are the steps I followed while  packaging diaspora for debian.&lt;/p&gt;
&lt;p&gt;My ultimate guide for debian-diaspora packaging has been this piratepad document :&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://piratepad.net/tu0H1eU2vH&#34;&gt;http://piratepad.net/tu0H1eU2vH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Diaspora is built on Ruby on Rails platform. In Ruby programming language, the software packages are called &amp;lsquo;RubyGems&amp;rsquo; or simply &amp;lsquo;Gems&amp;rsquo;. Gems contain a packaged Ruby application or library. So basically our task is to convert this RubyGem into debian file format.&lt;/p&gt;
&lt;p&gt;There are numerous number of gems upon which diaspora is depending. To complete the debian packaging of whole diaspora software we will have to package each and every one of these gems. So our first step towards packaging is select a gem which is a dependency for diaspora and that hasn&amp;rsquo;t been packaged yet. You can easily pick one from the above mentioned pirate pad document.&lt;/p&gt;
&lt;p&gt;Make sure you pick a gem that does not have any other gems as dependencies that aren&amp;rsquo;t packaged yet. If  the gem you picked has such dependencies, then package the latter gem first and then proceed with the former.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve selected your gem, it is time to file an ITP i.e. Intent To Package. A sample ITP is here:&lt;a href=&#34;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=691256&#34;&gt;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=691256&lt;/a&gt;. You&amp;rsquo;ll get all the information regarding your gem from rubygems.org or from the corresponding upstream file at github. We have to mail our ITP to the debian bug tracking system specifying the package name and a short description as the subject line. Never use rich text.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve send in your ITP and you got the confirmation, you are good to go with your packaging. It is quite natural that you will end up sending a buggy ITP receiving an error message. But BTS is really easy to work with and I got all such information regarding BTS from &lt;a href=&#34;http://www.debian.org/Bugs/server-control&#34;&gt;http://www.debian.org/Bugs/server-control&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So here ends the preps regarding the gem, you need to do before getting started with packaging.&lt;/p&gt;
&lt;p&gt;Will get to the fun stuff in my next post.&lt;/p&gt;
&lt;p&gt;For more links on packaging &lt;a href=&#34;http://resident.dyndns.info/content/wordpress/?p=282&#34; title=&#34;Nadir&#39;s blog&#34;&gt;go here&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Cheers.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>